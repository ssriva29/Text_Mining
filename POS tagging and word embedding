{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CLP0EVLFRTmQ"
   },
   "source": [
    "# Task 1: POS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 86
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 3744,
     "status": "ok",
     "timestamp": 1583730821016,
     "user": {
      "displayName": "Sanyuja Desai",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Ghr-q7kTqZkm_eWVPHfqlHw29j48MnGMhBHkLbc=s64",
      "userId": "09914108821220090479"
     },
     "user_tz": 300
    },
    "id": "zdwWztuPhNTy",
    "outputId": "7c708f12-9a8b-42be-c817-7eef56cce59a"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     /Users/shubhangisrivastava/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/shubhangisrivastava/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import nltk as nltk\n",
    "from nltk import word_tokenize as wordtk\n",
    "nltk.download('punkt')\n",
    "from bs4 import BeautifulSoup\n",
    "from nltk.tokenize import WordPunctTokenizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "nltk.download('stopwords')\n",
    "stop_words =stopwords.words('english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 124
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 24809,
     "status": "ok",
     "timestamp": 1583730849455,
     "user": {
      "displayName": "Sanyuja Desai",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Ghr-q7kTqZkm_eWVPHfqlHw29j48MnGMhBHkLbc=s64",
      "userId": "09914108821220090479"
     },
     "user_tz": 300
    },
    "id": "Z2jzi1DZxHxK",
    "outputId": "2f813c78-73a4-4615-89af-5e5280d2ee05"
   },
   "outputs": [],
   "source": [
    "#from google.colab import drive\n",
    "#drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "pfuIkQpShNT3"
   },
   "outputs": [],
   "source": [
    "uic= open('/Users/shubhangisrivastava/Documents/UIC Study material/IDS 566/Asg3/UIC.txt','r').read()\n",
    "nyt= open('/Users/shubhangisrivastava/Documents/UIC Study material/IDS 566/Asg3/NYT.txt','r').read()\n",
    "espn= open('/Users/shubhangisrivastava/Documents/UIC Study material/IDS 566/Asg3/ESPN.txt','r').read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "u2YEls6IhNUA"
   },
   "outputs": [],
   "source": [
    "## things to remove \n",
    "pat1 = r'@[A-Za-z0-9]+'\n",
    "pat2 = r'https?://[A-Za-z0-9./]+'\n",
    "combined_pat = r'|'.join((pat1, pat2))\n",
    "tok = WordPunctTokenizer()\n",
    "def text_cleaner(text):\n",
    "    soup = BeautifulSoup(text, 'html.parser')\n",
    "    souped = soup.get_text()\n",
    "    stripped = re.sub(combined_pat, '', souped)\n",
    "    try:\n",
    "        clean = stripped.decode(\"utf-8-sig\").replace(u\"\\ufffd\", \"?\")\n",
    "    except:\n",
    "        clean = stripped\n",
    "    letters_only = re.sub(\"[^a-zA-Z]\", \" \", clean)\n",
    "    lower_case = letters_only.lower()\n",
    "    words = tok.tokenize(lower_case)\n",
    "   # for w in words:\n",
    "     # if w not in stop_words:\n",
    "      # return (\" \".join(words)).strip()\n",
    "    return (\" \".join(words)).strip()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "kBKHjtdAhNUE"
   },
   "outputs": [],
   "source": [
    "uic= (text_cleaner(uic)).split()\n",
    "nyt= (text_cleaner(nyt)).split()\n",
    "espn= (text_cleaner(espn)).split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sKTUBbsEhNUJ"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/shubhangisrivastava/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('averaged_perceptron_tagger')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Dfds3b5otklT"
   },
   "outputs": [],
   "source": [
    "#uic=[w for w in uic if not w in stop_words]\n",
    "#nyt= [w for w in nyt if not w in stop_words] \n",
    "#espn=[w for w in espn if not w in stop_words] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bAFpDSkNhNUP"
   },
   "source": [
    "#### POS tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "o2iu5iJShNUQ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5176\n",
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "tag_uic= nltk.pos_tag(uic)\n",
    "tag_nyt= nltk.pos_tag(nyt)\n",
    "tag_espn=nltk.pos_tag(espn)\n",
    "\n",
    "print(len(tag_uic))\n",
    "print(type(tag_uic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_freq(temp):\n",
    "    tags = {}\n",
    "    pos_list = list()\n",
    "    for i in temp:\n",
    "        pos_list.append(i[1])\n",
    "    \n",
    "    for i in pos_list:\n",
    "        if i in tags.keys():\n",
    "            tags[i] = tags[i] + 1\n",
    "        else:\n",
    "            tags[i] = 1\n",
    "    return tags\n",
    "\n",
    "    \n",
    "tag_uic_freq = get_freq(tag_uic)\n",
    "tag_nyt_freq = get_freq(tag_nyt)\n",
    "tag_espn_freq = get_freq(tag_espn)\n",
    "\n",
    "#print(tag_espn_freq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fT8Qp_aUhNUU"
   },
   "outputs": [],
   "source": [
    "#tag_uic_freq= nltk.FreqDist(tag for (word, tag) in tag_uic)\n",
    "#tag_nyt_freq= nltk.FreqDist(tag for (word, tag) in tag_nyt)\n",
    "#tag_espn_freq= nltk.FreqDist(tag for (word, tag) in tag_espn)\n",
    "\n",
    "\n",
    "#print(tag_uic_freq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YuriRCb-hNUY"
   },
   "source": [
    "### Jaccard Similarity "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SVtso9MlhNUZ"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33311389071757735"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def jaccard_similarity(d1,d2):\n",
    "    num=list()\n",
    "    den=list()\n",
    "    for key in d1:\n",
    "        for key1 in d2:\n",
    "            intersection=0\n",
    "            if(key==key1):\n",
    "                intersection=min(d1[key],d2[key1])\n",
    "                num.append(intersection)\n",
    "                den.append(d1[key]+d2[key1]-intersection)\n",
    "    return(np.sum(num)/np.sum(den))\n",
    "#def jaccard_similarity(list1, list2):\n",
    " #   intersection = len(set(list1).intersection(list2))\n",
    "  #  union = len(set(list1)) + len(set(list2)) - intersection\n",
    "\n",
    "   # return intersection / union\n",
    "\n",
    "#jaccard_similarity(tag_uic_freq , tag_nyt_freq)\n",
    "#jaccard_similarity(tag_uic_freq , tag_espn_freq)\n",
    "jaccard_similarity(tag_nyt_freq , tag_espn_freq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 489,
     "status": "ok",
     "timestamp": 1583730865234,
     "user": {
      "displayName": "Sanyuja Desai",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Ghr-q7kTqZkm_eWVPHfqlHw29j48MnGMhBHkLbc=s64",
      "userId": "09914108821220090479"
     },
     "user_tz": 300
    },
    "id": "_MuVeBE7hNUd",
    "outputId": "ec858995-9c1e-4c5f-ab43-693577ca6ced"
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "list indices must be integers or slices, not str",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-ba50226050bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mjaccard_similarity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mtag\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtag\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtag_uic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtag\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtag\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtag_nyt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-11-78264803442f>\u001b[0m in \u001b[0;36mjaccard_similarity\u001b[0;34m(d1, d2)\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0mintersection\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m             \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mkey1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m                 \u001b[0mintersection\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m                 \u001b[0mnum\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintersection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m                 \u001b[0mden\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0md2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mintersection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not str"
     ]
    }
   ],
   "source": [
    "#jaccard_similarity(list( tag for (word, tag) in tag_uic), list(tag for (word,tag) in tag_nyt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 589,
     "status": "ok",
     "timestamp": 1583730866136,
     "user": {
      "displayName": "Sanyuja Desai",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Ghr-q7kTqZkm_eWVPHfqlHw29j48MnGMhBHkLbc=s64",
      "userId": "09914108821220090479"
     },
     "user_tz": 300
    },
    "id": "SXBULUPJhNUk",
    "outputId": "3d243137-5bc9-400c-c976-f4dd8b263d06"
   },
   "outputs": [],
   "source": [
    "#jaccard_similarity(list( tag for (word, tag) in tag_uic), list(tag for (word,tag) in tag_espn))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "45drjS9zRbKX"
   },
   "source": [
    "# Task 2: Word Embedding and Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "INb39JO6ZzRF"
   },
   "source": [
    "Download Glove and prepare the file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tMFKGP5ZXPFM"
   },
   "outputs": [],
   "source": [
    "!wget http://nlp.stanford.edu/data/glove.6B.zip\n",
    "!unzip glove.6B.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "AKnSSpyJaEGm"
   },
   "source": [
    "Generation of tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IGa0xN46aHVr"
   },
   "outputs": [],
   "source": [
    "def genTokens(lines):\n",
    "    tokens = []\n",
    "    for line in lines:\n",
    "        if len(line) > 0:\n",
    "            tokens.append(wordtk(line.lower()))\n",
    "    final = [item for sublist in tokens for item in sublist]\n",
    "    return final\n",
    "\n",
    "Tokens_UIC = genTokens(uic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4xy_lFbBbjDK"
   },
   "source": [
    "Getting the Glove Dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n-x1cdBNbLIi"
   },
   "outputs": [],
   "source": [
    "embeddings_dict = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "5oKOAxB1bbAZ"
   },
   "outputs": [],
   "source": [
    "with open(\"/Users/shubhangisrivastava/Documents/UIC Study material/IDS 566/Asg3/glove.6B.50d.txt\", 'r') as f:\n",
    "    for line in f:\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        vector = np.asarray(values[1:], \"float32\")\n",
    "        embeddings_dict[word] = vector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "q2qih26acArc"
   },
   "source": [
    "Randomly pick 50 words from the list of tokens and get their vectors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mbe2NkoXbeAY"
   },
   "outputs": [],
   "source": [
    "from random import sample\n",
    "random_tokens = sample(Tokens_UIC, 50)\n",
    "\n",
    "uic_embeddings = {}\n",
    "for key in random_tokens:\n",
    "  try:\n",
    "    uic_embeddings[key] = embeddings_dict[key]\n",
    "  except:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hVYPc4l9cU56"
   },
   "source": [
    "Convert the dictionary to dataframe and perform PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AwtUX5WIcYCw"
   },
   "outputs": [],
   "source": [
    "embed_df = pd.DataFrame(uic_embeddings.items(), columns=[\"word\", \"vector\"])\n",
    "print(embed_df)\n",
    "\n",
    "def generateMatrix(embeddings_vector):\n",
    "  matrix_rep = np.zeros((len(embeddings_vector), 50))\n",
    "  for i in range(0, len(embeddings_vector)):\n",
    "    for j in range(0,50):\n",
    "      matrix_rep[i][j] = embeddings_vector[i][j]\n",
    "    \n",
    "  return matrix_rep\n",
    "\n",
    "matrix_rep = generateMatrix(embed_df[\"vector\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "q1UP5FJneboW"
   },
   "source": [
    "2-dimensional PCA Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4S1KEekheded"
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca_four = PCA(n_components=2)\n",
    "fit = pca_four.fit_transform(matrix_rep)\n",
    "print(fit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "N2d_xV3wgMp0"
   },
   "source": [
    "Data Visualization using matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 700
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1059,
     "status": "ok",
     "timestamp": 1583731985513,
     "user": {
      "displayName": "Sanyuja Desai",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Ghr-q7kTqZkm_eWVPHfqlHw29j48MnGMhBHkLbc=s64",
      "userId": "09914108821220090479"
     },
     "user_tz": 300
    },
    "id": "unv2alqNgPoq",
    "outputId": "1165a83b-9880-4274-d059-d17b6e0955a7"
   },
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "\n",
    "plt.figure(figsize= (12,12))\n",
    "plt.plot([], marker=\"s\")\n",
    "plt.scatter(fit[:, 0], fit[:, 1])\n",
    "for i, word in enumerate(uic_embeddings):\n",
    "\tplt.annotate(word, xy=(fit[i, 0], fit[i, 1]))\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "HW 3:Project.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
